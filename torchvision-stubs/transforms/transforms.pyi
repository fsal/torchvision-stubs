# Stubs for torchvision.transforms.transforms (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import collections
from typing import Any, Optional

Sequence = collections.abc.Sequence
Iterable = collections.abc.Iterable

class Compose:
    transforms: Any = ...
    def __init__(self, transforms: Any) -> None: ...
    def __call__(self, img: Any): ...

class ToTensor:
    def __call__(self, pic: Any): ...

class ToPILImage:
    mode: Any = ...
    def __init__(self, mode: Optional[Any] = ...) -> None: ...
    def __call__(self, pic: Any): ...

class Normalize:
    mean: Any = ...
    std: Any = ...
    inplace: Any = ...
    def __init__(self, mean: Any, std: Any, inplace: bool = ...) -> None: ...
    def __call__(self, tensor: Any): ...

class Resize:
    size: Any = ...
    interpolation: Any = ...
    def __init__(self, size: Any, interpolation: Any = ...) -> None: ...
    def __call__(self, img: Any): ...

class Scale(Resize):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class CenterCrop:
    size: Any = ...
    def __init__(self, size: Any) -> None: ...
    def __call__(self, img: Any): ...

class Pad:
    padding: Any = ...
    fill: Any = ...
    padding_mode: Any = ...
    def __init__(self, padding: Any, fill: int = ..., padding_mode: str = ...) -> None: ...
    def __call__(self, img: Any): ...

class Lambda:
    lambd: Any = ...
    def __init__(self, lambd: Any) -> None: ...
    def __call__(self, img: Any): ...

class RandomTransforms:
    transforms: Any = ...
    def __init__(self, transforms: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> None: ...

class RandomApply(RandomTransforms):
    p: Any = ...
    def __init__(self, transforms: Any, p: float = ...) -> None: ...
    def __call__(self, img: Any): ...

class RandomOrder(RandomTransforms):
    def __call__(self, img: Any): ...

class RandomChoice(RandomTransforms):
    def __call__(self, img: Any): ...

class RandomCrop:
    size: Any = ...
    padding: Any = ...
    pad_if_needed: Any = ...
    fill: Any = ...
    padding_mode: Any = ...
    def __init__(self, size: Any, padding: Optional[Any] = ..., pad_if_needed: bool = ..., fill: int = ..., padding_mode: str = ...) -> None: ...
    @staticmethod
    def get_params(img: Any, output_size: Any): ...
    def __call__(self, img: Any): ...

class RandomHorizontalFlip:
    p: Any = ...
    def __init__(self, p: float = ...) -> None: ...
    def __call__(self, img: Any): ...

class RandomVerticalFlip:
    p: Any = ...
    def __init__(self, p: float = ...) -> None: ...
    def __call__(self, img: Any): ...

class RandomPerspective:
    p: Any = ...
    interpolation: Any = ...
    distortion_scale: Any = ...
    def __init__(self, distortion_scale: float = ..., p: float = ..., interpolation: Any = ...) -> None: ...
    def __call__(self, img: Any): ...
    @staticmethod
    def get_params(width: Any, height: Any, distortion_scale: Any): ...

class RandomResizedCrop:
    size: Any = ...
    interpolation: Any = ...
    scale: Any = ...
    ratio: Any = ...
    def __init__(self, size: Any, scale: Any = ..., ratio: Any = ..., interpolation: Any = ...) -> None: ...
    @staticmethod
    def get_params(img: Any, scale: Any, ratio: Any): ...
    def __call__(self, img: Any): ...

class RandomSizedCrop(RandomResizedCrop):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class FiveCrop:
    size: Any = ...
    def __init__(self, size: Any) -> None: ...
    def __call__(self, img: Any): ...

class TenCrop:
    size: Any = ...
    vertical_flip: Any = ...
    def __init__(self, size: Any, vertical_flip: bool = ...) -> None: ...
    def __call__(self, img: Any): ...

class LinearTransformation:
    transformation_matrix: Any = ...
    mean_vector: Any = ...
    def __init__(self, transformation_matrix: Any, mean_vector: Any) -> None: ...
    def __call__(self, tensor: Any): ...

class ColorJitter:
    brightness: Any = ...
    contrast: Any = ...
    saturation: Any = ...
    hue: Any = ...
    def __init__(self, brightness: int = ..., contrast: int = ..., saturation: int = ..., hue: int = ...) -> None: ...
    @staticmethod
    def get_params(brightness: Any, contrast: Any, saturation: Any, hue: Any): ...
    def __call__(self, img: Any): ...

class RandomRotation:
    degrees: Any = ...
    resample: Any = ...
    expand: Any = ...
    center: Any = ...
    def __init__(self, degrees: Any, resample: bool = ..., expand: bool = ..., center: Optional[Any] = ...) -> None: ...
    @staticmethod
    def get_params(degrees: Any): ...
    def __call__(self, img: Any): ...

class RandomAffine:
    degrees: Any = ...
    translate: Any = ...
    scale: Any = ...
    shear: Any = ...
    resample: Any = ...
    fillcolor: Any = ...
    def __init__(self, degrees: Any, translate: Optional[Any] = ..., scale: Optional[Any] = ..., shear: Optional[Any] = ..., resample: bool = ..., fillcolor: int = ...) -> None: ...
    @staticmethod
    def get_params(degrees: Any, translate: Any, scale_ranges: Any, shears: Any, img_size: Any): ...
    def __call__(self, img: Any): ...

class Grayscale:
    num_output_channels: Any = ...
    def __init__(self, num_output_channels: int = ...) -> None: ...
    def __call__(self, img: Any): ...

class RandomGrayscale:
    p: Any = ...
    def __init__(self, p: float = ...) -> None: ...
    def __call__(self, img: Any): ...
