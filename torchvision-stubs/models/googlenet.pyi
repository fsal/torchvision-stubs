# Stubs for torchvision.models.googlenet (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import torch.nn.functional as nn
from collections import namedtuple
from typing import Any

_GoogLeNetOuputs = namedtuple('GoogLeNetOuputs', ['logits', 'aux_logits2', 'aux_logits1'])

def googlenet(pretrained: bool = ..., progress: bool = ..., **kwargs: Any): ...

class GoogLeNet(nn.Module):
    aux_logits: Any = ...
    transform_input: Any = ...
    conv1: Any = ...
    maxpool1: Any = ...
    conv2: Any = ...
    conv3: Any = ...
    maxpool2: Any = ...
    inception3a: Any = ...
    inception3b: Any = ...
    maxpool3: Any = ...
    inception4a: Any = ...
    inception4b: Any = ...
    inception4c: Any = ...
    inception4d: Any = ...
    inception4e: Any = ...
    maxpool4: Any = ...
    inception5a: Any = ...
    inception5b: Any = ...
    aux1: Any = ...
    aux2: Any = ...
    avgpool: Any = ...
    dropout: Any = ...
    fc: Any = ...
    def __init__(self, num_classes: int = ..., aux_logits: bool = ..., transform_input: bool = ..., init_weights: bool = ...) -> None: ...
    def forward(self, x: Any): ...

class Inception(nn.Module):
    branch1: Any = ...
    branch2: Any = ...
    branch3: Any = ...
    branch4: Any = ...
    def __init__(self, in_channels: Any, ch1x1: Any, ch3x3red: Any, ch3x3: Any, ch5x5red: Any, ch5x5: Any, pool_proj: Any) -> None: ...
    def forward(self, x: Any): ...

class InceptionAux(nn.Module):
    conv: Any = ...
    fc1: Any = ...
    fc2: Any = ...
    def __init__(self, in_channels: Any, num_classes: Any) -> None: ...
    def forward(self, x: Any): ...

class BasicConv2d(nn.Module):
    conv: Any = ...
    bn: Any = ...
    def __init__(self, in_channels: Any, out_channels: Any, **kwargs: Any) -> None: ...
    def forward(self, x: Any): ...
