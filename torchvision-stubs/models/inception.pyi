# Stubs for torchvision.models.inception (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import torch.nn.functional as nn
from collections import namedtuple
from typing import Any

_InceptionOuputs = namedtuple('InceptionOuputs', ['logits', 'aux_logits'])

def inception_v3(pretrained: bool = ..., progress: bool = ..., **kwargs: Any): ...

class Inception3(nn.Module):
    aux_logits: Any = ...
    transform_input: Any = ...
    Conv2d_1a_3x3: Any = ...
    Conv2d_2a_3x3: Any = ...
    Conv2d_2b_3x3: Any = ...
    Conv2d_3b_1x1: Any = ...
    Conv2d_4a_3x3: Any = ...
    Mixed_5b: Any = ...
    Mixed_5c: Any = ...
    Mixed_5d: Any = ...
    Mixed_6a: Any = ...
    Mixed_6b: Any = ...
    Mixed_6c: Any = ...
    Mixed_6d: Any = ...
    Mixed_6e: Any = ...
    AuxLogits: Any = ...
    Mixed_7a: Any = ...
    Mixed_7b: Any = ...
    Mixed_7c: Any = ...
    fc: Any = ...
    def __init__(self, num_classes: int = ..., aux_logits: bool = ..., transform_input: bool = ...) -> None: ...
    def forward(self, x: Any): ...

class InceptionA(nn.Module):
    branch1x1: Any = ...
    branch5x5_1: Any = ...
    branch5x5_2: Any = ...
    branch3x3dbl_1: Any = ...
    branch3x3dbl_2: Any = ...
    branch3x3dbl_3: Any = ...
    branch_pool: Any = ...
    def __init__(self, in_channels: Any, pool_features: Any) -> None: ...
    def forward(self, x: Any): ...

class InceptionB(nn.Module):
    branch3x3: Any = ...
    branch3x3dbl_1: Any = ...
    branch3x3dbl_2: Any = ...
    branch3x3dbl_3: Any = ...
    def __init__(self, in_channels: Any) -> None: ...
    def forward(self, x: Any): ...

class InceptionC(nn.Module):
    branch1x1: Any = ...
    branch7x7_1: Any = ...
    branch7x7_2: Any = ...
    branch7x7_3: Any = ...
    branch7x7dbl_1: Any = ...
    branch7x7dbl_2: Any = ...
    branch7x7dbl_3: Any = ...
    branch7x7dbl_4: Any = ...
    branch7x7dbl_5: Any = ...
    branch_pool: Any = ...
    def __init__(self, in_channels: Any, channels_7x7: Any) -> None: ...
    def forward(self, x: Any): ...

class InceptionD(nn.Module):
    branch3x3_1: Any = ...
    branch3x3_2: Any = ...
    branch7x7x3_1: Any = ...
    branch7x7x3_2: Any = ...
    branch7x7x3_3: Any = ...
    branch7x7x3_4: Any = ...
    def __init__(self, in_channels: Any) -> None: ...
    def forward(self, x: Any): ...

class InceptionE(nn.Module):
    branch1x1: Any = ...
    branch3x3_1: Any = ...
    branch3x3_2a: Any = ...
    branch3x3_2b: Any = ...
    branch3x3dbl_1: Any = ...
    branch3x3dbl_2: Any = ...
    branch3x3dbl_3a: Any = ...
    branch3x3dbl_3b: Any = ...
    branch_pool: Any = ...
    def __init__(self, in_channels: Any) -> None: ...
    def forward(self, x: Any): ...

class InceptionAux(nn.Module):
    conv0: Any = ...
    conv1: Any = ...
    fc: Any = ...
    def __init__(self, in_channels: Any, num_classes: Any) -> None: ...
    def forward(self, x: Any): ...

class BasicConv2d(nn.Module):
    conv: Any = ...
    bn: Any = ...
    def __init__(self, in_channels: Any, out_channels: Any, **kwargs: Any) -> None: ...
    def forward(self, x: Any): ...
